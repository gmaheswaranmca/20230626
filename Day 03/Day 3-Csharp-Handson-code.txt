1. Find square of the given number 
2. Find sum of two salaries 
3. Find smallest age of given two ages 
4. Find smallest age and largest age of given two ages. By refactoring previous code (finding smallest age) to the function, call the function.
Even you define the function for finding largest age.
5. Find smallest of three salaries.
6. Find smallest, largest of three salaries 
using functions. Convert the if statement as conditional operator.
7. Find day name for the day number.
8. Find month name for the month number.
	Assignment 
9. To print number between 1 and 5. 	
10. To print first N odd numbers.
11. To find sum of digits in a given number. 
12. To sum the numbers till we get negative number.

Assignments:
13. To print first N prime numbers.
14. To find number of odd digits, number of event digits in a given number.
		number=12345  odd digits #3 even digits # 2
		number=1234		odd digits #2 even digits # 2
		number=1244		odd digits #1 even digits # 3
15. To sum the numbers till we get 1000 (STOP).
	Enter a number: 10
	Enter a number: 20
	Enter a number: -5				25
	Enter a number: 1000			!!! STOP 
	Sum of the numbers is 25 











1. Find square of the given number 
static void Main(string[] args)
{
		Console.WriteLine("Enter a number:");
		int number = int.Parse(Console.ReadLine());

		int square = number * number;

		Console.WriteLine("Square of {0} is {1}", number, square);
		Console.ReadKey();
}
2. Find sum of two salaries 
static void Main(string[] args)
{
		double firstSalary = 5000;
		double secondSalary = 10000;

		double sum = firstSalary + secondSalary;

		Console.WriteLine("First Salary : {0}", firstSalary);
		Console.WriteLine("Second Salary : {0}", secondSalary);
		Console.WriteLine("Total Salary : {0}", sum);
		Console.ReadKey();
}

static void Main(string[] args)
{
		Console.WriteLine("Enter First Salary");
		double firstSalary = double.Parse(Console.ReadLine());
		Console.WriteLine("Enter Second Salary");
		double secondSalary = double.Parse(Console.ReadLine());

		double sum = firstSalary + secondSalary;

		Console.WriteLine("First Salary : {0}", firstSalary);
		Console.WriteLine("Second Salary : {0}", secondSalary);
		Console.WriteLine("Total Salary : {0}", sum);
		Console.ReadKey();
}

3. Find smallest age of given two ages.
age : 0 - 120
#A
static void Main(string[] args)
{
		byte firstAge = 46;
		byte secondAge = 35;
		byte smallestAge = 0;
		if((firstAge < secondAge))
		{
				smallestAge = firstAge;
		}
		else
		{
				smallestAge = secondAge;
		}

		Console.WriteLine("First Age: {0}", firstAge);
		Console.WriteLine("Second Age: {0}", secondAge);
		Console.WriteLine("Smallest Age: {0}", smallestAge);

		Console.ReadKey();
}
#B
 static void Main(string[] args)
{
		byte firstAge = 46;
		byte secondAge = 35;
		byte smallestAge = 0;

		smallestAge = ((firstAge < secondAge) ? firstAge  : secondAge);

		Console.WriteLine("First Age: {0}", firstAge);
		Console.WriteLine("Second Age: {0}", secondAge);
		Console.WriteLine("Smallest Age: {0}", smallestAge);

		Console.ReadKey();
}

4. Find smallest age and largest age of given two ages. By refactoring previous code (finding smallest age) to the function, call the function.
Even you define the function for finding largest age.

class ProcessAge
{
		internal static byte findSmallestAge(byte firstAge, byte secondAge)
		{
				byte smallestAge;
				if ((firstAge < secondAge))
				{
						smallestAge = firstAge;
				}
				else
				{
						smallestAge = secondAge;
				}
				return smallestAge;
		}
		internal static byte findLargestAge(byte firstAge, byte secondAge)
		{
				byte largestAge;
				if ((firstAge > secondAge))
				{
						largestAge = firstAge;
				}
				else
				{
						largestAge = secondAge;
				}
				return largestAge;
		}
}
class Program
{
		static void Main(string[] args)
		{
				byte firstAge = 35;
				byte secondAge = 46;
				byte smallestAge = 0, largestAge = 0;

				smallestAge = ProcessAge.findSmallestAge(firstAge, secondAge);
				largestAge = ProcessAge.findLargestAge(firstAge, secondAge);

				Console.WriteLine("First Age: {0}", firstAge);
				Console.WriteLine("Second Age: {0}", secondAge);
				Console.WriteLine("Smallest Age: {0}", smallestAge);
				Console.WriteLine("Largest Age: {0}", largestAge);

				Console.ReadKey();
		}
}


5. Find smallest of three salaries.
class Program
{
		static void Main(string[] args)
		{
				float firstSalary = 4500;
				float secondSalary = 5000;
				float thirdSalary = 3000;

				float smallestSalary = 0;

				if(firstSalary < secondSalary && firstSalary < thirdSalary)
				{
						smallestSalary = firstSalary;
				}
				else if(secondSalary < thirdSalary)
				{
						smallestSalary = secondSalary;
				}
				else
				{
						smallestSalary = thirdSalary;
				}

				Console.WriteLine("First Salary : {0}", firstSalary);
				Console.WriteLine("Second Salary : {0}", secondSalary);
				Console.WriteLine("Third Salary : {0}", thirdSalary);
				Console.WriteLine("Smallest Salary : {0}", smallestSalary);

				Console.ReadKey();
		}



6. Find smallest, largest of three salaries 
using functions. Convert the if statement as conditional operator.

Programmer's Task

7. Find day name for the day number.
#A
static void Main(string[] args)
{
		int dayNumber = 10;

		string dayName = "";

		if(1 == dayNumber)
		{
				dayName = "Monday";
		}
		else if(2 == dayNumber)
		{
				dayName = "Tuesday";
		}
		else if (3 == dayNumber)
		{
				dayName = "Wednesday";
		}
		else if (4 == dayNumber)
		{
				dayName = "Thursday";
		}
		else if (5 == dayNumber)
		{
				dayName = "Friday";
		}
		else if (6 == dayNumber)
		{
				dayName = "Saturday";
		}
		else if (7 == dayNumber)
		{
				dayName = "Sunday";
		}
		else
		{
				dayName = "Invalid Data";
		}

		Console.WriteLine("Day Number : {0}", dayNumber);
		Console.WriteLine("Day Name : {0}", dayName);
		Console.ReadKey();
}

#B
 static void Main(string[] args)
	{
			int dayNumber = 2;

			string dayName = "";

			switch (dayNumber)
			{
					case 1:
							dayName = "Monday";
							break;
					case 2:
							dayName = "Tuesday";
							break;
					case 3:
							dayName = "Wednesday";
							break;
					case 4:
							dayName = "Thursday";
							break;
					case 5:
							dayName = "Friday";
							break;
					case 6:
							dayName = "Saturday";
							break;
					case 7:
							dayName = "Sunday";
							break;
					default:
							dayName = "Invalid Data";
							break;
			}


			Console.WriteLine("Day Number : {0}", dayNumber);
			Console.WriteLine("Day Name : {0}", dayName);
			Console.ReadKey();
	}

#C using function 
internal static string findDayName(int dayNumber)
		{
				string dayName = "";

				switch (dayNumber)
				{
						case 1:
								dayName = "Monday";
								break;
						case 2:
								dayName = "Tuesday";
								break;
						case 3:
								dayName = "Wednesday";
								break;
						case 4:
								dayName = "Thursday";
								break;
						case 5:
								dayName = "Friday";
								break;
						case 6:
								dayName = "Saturday";
								break;
						case 7:
								dayName = "Sunday";
								break;
						default:
								dayName = "Invalid Data";
								break;
				}
				return dayName;
		}
}
class Program
{
		static void Main(string[] args)
		{
				int dayNumber = 2;

				string dayName = DayName.findDayName(dayNumber);


				Console.WriteLine("Day Number : {0}", dayNumber);
				Console.WriteLine("Day Name : {0}", dayName);

				Console.WriteLine("Day Name : {0}", DayName.findDayName(1));
				Console.WriteLine("Day Name : {0}", DayName.findDayName(2));
				Console.WriteLine("Day Name : {0}", DayName.findDayName(3));
				Console.WriteLine("Day Name : {0}", DayName.findDayName(4));

				Console.ReadKey();
		}
}


* defualt is optional.
* case expression has to be 
		integer number 
		character
		enumeration type 
		string 

----string example----
static void Main(string[] args)
{
		string dayName = "Monday";
		int dayNumber = 0;
		switch(dayName)
		{
				case "Monday":
						dayNumber = 1;
						break;
				case "Tuesday":
						dayNumber = 2;
						break;
				case "Wednesday":
						dayNumber = 3;
						break;
		}

		Console.WriteLine("Day number for {0} is {1}", dayName, dayNumber);

		Console.ReadKey();
}

8. Find month name for the month number.
	Assignment 
	
Conclusion of the Conditional Control Statements:
1. if[..else]
		to pick the choice of code based on conditionals
2. switch 
		to pick the choice of code based on 
		fixed labels 
3. what is function?
   why function is?
	 
	 -- named code 
			which takes argument and returns optionally a value
	 -- modularization 
			reusability 
	 -- to adher industry standard: 
		we may apply
		"single responsibility principle" 
		SOLID principles 
			S - Single Responsibilty Principle 
			O - .... "Learn By self" 
			L - .... "Learn By self"
			I - .... "Learn By self" 
			D - .... "Learn By self"
			

Conditional Loop/Iteration Statements:
-- to repeat the code 
	for loop 
	while loop 
	do..while loop 
	
9. To print number between 1 and 5. 	
#A using for loop 
static void Main(string[] args)
{
		Console.WriteLine("Numbers bt 1 and 5:");
		for (int I = 1; I <= 5; I++)
		{
				Console.Write("{0}, ", I);
		}

		Console.ReadKey();
}	

#B using while loop 	
static void Main(string[] args)
{
		Console.WriteLine("Numbers bt 1 and 5:");
		int I = 1;
		while (I <= 5)
		{
				Console.Write("{0}, ", I);
				I++;
		}

		Console.ReadKey();
}

#B using do..while loop 
static void Main(string[] args)
{
		Console.WriteLine("Numbers bt 1 and 5:");
		int I = 1;
		
		do
		{
				Console.Write("{0}, ", I);
				I++;
		}
		while (I <= 5) ;

				Console.ReadKey();
}	

10. To print first N odd numbers.
	for 			--- Readble by fellow programmers
					??? when ??? if number of iterations is fixed 
	while 
	do..while 


static void Main(string[] args)
{
		int N = 25;
		Console.WriteLine("Odd Numbers:");
		int term = 1;
		for(int I=1; I <= N; I++)
		{
				Console.Write("{0}, ", term);
				term = term + 2;
		}
		Console.ReadKey();
}

11. To find sum of digits in a given number. 
	number = 12 			1 + 2 = 3 
	number = 123 			1 + 2 + 3 = 6 
	number = 1234     1 + 2 + 3 + 4 = 10
	
	LSD - Least Significant Digit (Unit Digit)
	12 / 10 -> quotient : 1,remainder: 2
	1234/10 -> quotient: 123, remainder: 4
	
	% gives us remainder -> extract the unit digit  
	/ gives us quotient  -> removes the unit digit 
	
	while loop 

#A without debugging
static void Main(string[] args)
{
	int N = 1234;
	int sum = 0;                

	int S = N;
	while (S > 0)               
	{
			int digit = S % 10;     
			sum += digit;               
			S = S / 10;                
	}

	Console.WriteLine("Number : {0}", N);
	Console.WriteLine("Sum of Digits : {0}", sum);
	Console.ReadKey();
}	
	
#B with debugging (hand-writing)
static void Main(string[] args)
{
	int N = 1234;
	int sum = 0;                //  0

	int S = N;
	while (S > 0)               // 1234    123      12          1
	{
			int digit = S % 10;     // 4        3       2           1
			sum += digit;           // 0+4=4    4+3=7   7+2=9       9+1=10    
			S = S / 10;             // 123      12      1           0
	}

	Console.WriteLine("Number : {0}", N);
	Console.WriteLine("Sum of Digits : {0}", sum);
	Console.ReadKey();
}
	
12. To sum the numbers till we get negative number.
	10					10
	20					30 
	4						34 
	
	do..while loop 

* menu driven programming, we may use do..while loop.	
static void Main(string[] args)
	{
			int sum = 0;
			int number = 0;

			do
			{
					Console.Write("Enter a number:");
					number = int.Parse(Console.ReadLine());
					if (number >= 0)
					{
							sum += number;
					}
			} while (number >= 0);

			Console.WriteLine("The sum is {0}", sum);

			Console.ReadKey();
	}	
==================================================
	1. computing / data processing 
	Declaration Statement 
		Data Types 
		Variables / Functions - Identifiers 
	Assignment Statement 
	Control Statement 
		Conditional 
			if..else 
			switch..case..default 
		Loop / Itermation 
			for..
			while 
			do..while 
	Functions / Methods - Modularization - Procedural Oriented Programmming (Tasks)
	OOP - see problem as inter connection many real time objects 
						- Object Oriented Programming 
	collections
	exception handling 
	
	delegates, events, lambda 
==================================================	